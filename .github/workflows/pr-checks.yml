# .github/workflows/pr-checks.yml

name: Pull Request Checks

on:
  pull_request:
    branches: [ main, develop ]

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run Black formatter check
      run: |
        black --check auth_integration users tests
    
    - name: Run isort import sorting check
      run: |
        isort --check-only auth_integration users tests
    
    - name: Run flake8 linting
      run: |
        flake8 auth_integration users tests
    
    - name: Run mypy type checking
      run: |
        mypy auth_integration users --ignore-missing-imports
    
    - name: Check for security issues
      run: |
        bandit -r auth_integration users -ll
    
    - name: Check dependencies for vulnerabilities
      run: |
        safety check

  test-coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Set up test environment
      run: |
        cp .env.example .env
        sed -i 's/your-super-secret-key-here/test-secret-key/' .env
        sed -i 's|postgresql://user:password@host:port/database|postgresql://postgres:postgres@localhost:5432/test_db|' .env
    
    - name: Run tests with coverage
      run: |
        pytest --cov=auth_integration --cov=users --cov-report=term-missing --cov-fail-under=80
    
    - name: Generate coverage report
      run: |
        coverage html
    
    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: htmlcov/

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: pefoma-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max