# .github/workflows/ci-cd.yml

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  REGISTRY_NAME: pefomaacr
  IMAGE_NAME: pefoma-backend
  RESOURCE_GROUP: pefoma-rg
  CONTAINER_APP_NAME: pefoma-backend

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Set up environment variables
      run: |
        cp .env.example .env
        sed -i 's/your-super-secret-key-here/test-secret-key/' .env
        sed -i 's|postgresql://user:password@host:port/database|postgresql://postgres:postgres@localhost:5432/test_db|' .env
        sed -i 's|redis://localhost:5432/1|redis://localhost:5432/1|' .env
        sed -i 's/https:\/\/your-project.supabase.co/https:\/\/test.supabase.co/' .env
        sed -i 's/your-anon-key/test-anon-key/' .env
        sed -i 's/your-service-role-key/test-service-role-key/' .env
        sed -i 's/your-jwt-secret/test-jwt-secret/' .env
    
    - name: Run migrations
      run: |
        python manage.py migrate --settings=pefoma_backend.settings
    
    - name: Run linting
      run: |
        flake8 auth_integration users --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 auth_integration users --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run type checking
      run: |
        mypy auth_integration users --ignore-missing-imports
    
    - name: Run tests with coverage
      run: |
        pytest --cov=auth_integration --cov=users --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Test Docker build
      run: |
        docker build -t test-image .

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run security scan with bandit
      run: |
        pip install bandit
        bandit -r auth_integration users -f json -o bandit-report.json || true
    
    - name: Run safety check
      run: |
        pip install safety
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
    
    - name: Get commit SHA
      id: vars
      run: echo "sha_short=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_OUTPUT
    
    - name: Build and push Docker image
      run: |
        IMAGE_TAG="${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.sha_short }}"
        LATEST_TAG="${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest"
        
        docker build -t $IMAGE_TAG -t $LATEST_TAG .
        docker push $IMAGE_TAG
        docker push $LATEST_TAG
        
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
    
    - name: Deploy to Azure Container Apps
      uses: azure/container-apps-deploy-action@v1
      with:
        containerAppName: ${{ env.CONTAINER_APP_NAME }}
        resourceGroup: ${{ env.RESOURCE_GROUP }}
        imageToDeploy: ${{ env.IMAGE_TAG }}
        environmentVariables: |
          DJANGO_SECRET_KEY=secretref:django-secret-key
          DATABASE_URL=secretref:database-url
          SUPABASE_URL=secretref:supabase-url
          SUPABASE_ANON_KEY=secretref:supabase-anon-key
          SUPABASE_SERVICE_ROLE_KEY=secretref:supabase-service-role-key
          SUPABASE_JWT_SECRET=secretref:supabase-jwt-secret
          DEBUG=false
          ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}
    
    - name: Run post-deployment tests
      run: |
        # Wait for deployment to be ready
        sleep 60
        
        # Health check
        curl -f https://${{ env.CONTAINER_APP_NAME }}.azurecontainerapps.io/health/ || exit 1
        
        echo "Deployment successful!"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.build-and-deploy.result == 'success'
      run: |
        echo "✅ Deployment successful!"
        # Add Slack/Teams notification here if needed
    
    - name: Notify Failure
      if: needs.build-and-deploy.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        # Add Slack/Teams notification here if needed

