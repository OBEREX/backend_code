# Generated by Django 4.2.7 on 2025-10-07 14:09

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('users', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('is_default', models.BooleanField(default=False)),
                ('color', models.CharField(default='#3b82f6', help_text='Hex color code for charts (e.g., #3b82f6)', max_length=7)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(blank=True, help_text='Null for default categories, set for custom categories', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='categories', to='users.profile')),
            ],
            options={
                'db_table': 'categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='InventoryItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('item_name', models.CharField(max_length=255)),
                ('current_count', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('unit_price', models.DecimalField(blank=True, decimal_places=2, help_text='Optional: for cost calculations', max_digits=10, null=True)),
                ('last_scanned', models.DateTimeField(blank=True, null=True)),
                ('image_url', models.URLField(blank=True, max_length=500, null=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='inventory_items', to='dashboard.category')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory_items', to='users.profile')),
            ],
            options={
                'db_table': 'inventory_items',
                'ordering': ['-last_scanned', 'item_name'],
            },
        ),
        migrations.CreateModel(
            name='Scan',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('scan_type', models.CharField(choices=[('video', 'Video'), ('image', 'Image')], default='image', max_length=10)),
                ('media_url', models.URLField(blank=True, help_text='Optional: URL to stored video/image', max_length=500, null=True)),
                ('total_items_count', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('processing_time_seconds', models.DecimalField(decimal_places=2, max_digits=6, validators=[django.core.validators.MinValueValidator(0)])),
                ('overall_confidence', models.DecimalField(decimal_places=2, help_text='Average confidence score (0-100)', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('time_saved_minutes', models.DecimalField(blank=True, decimal_places=2, help_text='Calculated time savings vs manual counting', max_digits=8, null=True)),
                ('cost_saved_usd', models.DecimalField(blank=True, decimal_places=2, help_text='Calculated cost savings in USD', max_digits=10, null=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scans', to='users.profile')),
                ('performed_by', models.ForeignKey(help_text='Sub-user who performed the scan', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performed_scans', to='users.profile')),
            ],
            options={
                'db_table': 'scans',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='BenchmarkSettings',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('time_per_manual_item_seconds', models.DecimalField(decimal_places=2, default=5.0, help_text='Average time to manually count one item (seconds)', max_digits=6)),
                ('labor_cost_per_hour_usd', models.DecimalField(decimal_places=2, default=25.0, help_text='Average labor cost per hour (USD)', max_digits=8)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.OneToOneField(blank=True, help_text='Null for global defaults', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='benchmark_settings', to='users.profile')),
            ],
            options={
                'verbose_name': 'Benchmark Settings',
                'verbose_name_plural': 'Benchmark Settings',
                'db_table': 'benchmark_settings',
            },
        ),
        migrations.CreateModel(
            name='ScannedItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('item_name', models.CharField(max_length=255)),
                ('count', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('confidence', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='scanned_items', to='dashboard.category')),
                ('inventory_item', models.ForeignKey(blank=True, help_text='Linked inventory item (if matched)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='scan_detections', to='dashboard.inventoryitem')),
                ('scan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scanned_items', to='dashboard.scan')),
            ],
            options={
                'db_table': 'scanned_items',
                'ordering': ['-confidence'],
                'indexes': [models.Index(fields=['scan', 'category'], name='scanned_ite_scan_id_f8facd_idx'), models.Index(fields=['inventory_item'], name='scanned_ite_invento_69d526_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='scan',
            index=models.Index(fields=['company', 'timestamp'], name='scans_company_e05d2a_idx'),
        ),
        migrations.AddIndex(
            model_name='scan',
            index=models.Index(fields=['company', 'performed_by', 'timestamp'], name='scans_company_91b05c_idx'),
        ),
        migrations.AddIndex(
            model_name='scan',
            index=models.Index(fields=['timestamp'], name='scans_timesta_f7a963_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryitem',
            index=models.Index(fields=['company', 'category'], name='inventory_i_company_15397a_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryitem',
            index=models.Index(fields=['company', 'last_scanned'], name='inventory_i_company_80b1de_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryitem',
            index=models.Index(fields=['item_name'], name='inventory_i_item_na_016eee_idx'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['company', 'is_default'], name='categories_company_7b4317_idx'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['name'], name='categories_name_98d7d5_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='category',
            unique_together={('name', 'company')},
        ),
    ]
